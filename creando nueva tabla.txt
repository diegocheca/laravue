creando nueva tabla
pasos que hice con orden de trabajo:
 1 - php artisan make:model OrdenTrabajo --migration --resource --controller
 2 - importe la table con contenido desde phpmyadmin
 3 - actualice el codigo de las migraciones
 4 - routes en api
 5- crear funciones en el controller: create, update, show, index,etc
 6 - actualizar el model
 7 - crear el factory: php artisan make:factory OrdenTrabajoFactory --model=OrdenTrabajo
 9 - completar el Factory
 10- probar por direccion
 11 - probar en component

siguiendo varios dias despues:
12 - correr: php artisan make:resource OrdenTrabajo
13- crear la routes de la nueva api:   ponemos en el archivo rotues.api
     Route::apiResource('ordendetrabajo', 'OrdenTrabajoController');
     



--ejemplo 2 - Materiales
la tabla materiales tiene:
id
descripcion
stock
proveedor
contactoProveedor
observacion
created_by
updated_by
deleted_by - null -  soft-delete

pasos a seguir

1 - hacer migrate
php artisan make:migration create_materiales_table
2 - php artisan run migrate
o 
alternativamente crear tabla con phpmyadmin
3- crear model con : php artisan make:model Laravue\Models\Material
4 - crear resorce: php artisan make:resource MaterialResource   
el resource es para hablar con la base de datos directamante
5 - crear controller: php artisan make:controller MaterialController --resource --model=Laravue\Models\Material
6-  crear la linea de api en las routes,---> route/api agregar:  Route::apiResource('materiales', 'MaterialController');
7 - agregar en el controller, la linea de uso de resorce:
use App\Http\Resources\MaterialResource;
8- modificar el index del controller para que devuelva todos los registros de la tabla
public function index()
    {
        return MaterialResource::collection(Material::all());
    }
9- seeding de la tabla, hay q crear un archivo seeding:
    php artisan make:seeder MaterialesSeeder
10- es rellenar de codigo de la function run del seeder.
11- completar el model de laravel de la tabla q usamos , con los fillable and protected y softdeleted_at
12 - crear direccion de vue , esto es un objeto js dentro del router/index.js
13 - crear folder dentro de las views de js
14 - crear el file con el nombre q se definio antes
15 - probar el correcto funcionamiento de la vista mediante el menu de la izquierda
16 - modifcamos el archivo del comonente de vue 
17 - probamos los cambios desde el browser
18 - poner en la el script de la vista el reource donde busca datos
19-  comprobar funcionamiento por consola de browser
20 - modificar la talba y los nuevos valores
21 - actualizar boton delete
22 - modificar modal de crear nuevo materiales
 
























 --- instalando librerias de vuejs

 1. buscar la libreria en internet
 2 yarn install vue-count-to --save-dev
    (add --save-dev will automatically add devDependencies to package.json)
3. hay dos opciones:
    global registration:
        en app.js poner:

        import countTo from 'vue-count-to'
        Vue.component('countTo', countTo)

        donde: import 1-countTo from 2'vue-count-to'
                3Vue.component(4'countTo', 5countTo)

                1- nombre q invento parecido al de la libreria
                2 - lo que se puso solo en el packjson al correr el comando
                3 - va asi
                4 - el nombre del nuevo componter. como lov yo a llamar desde ahora adentro de los compontents
                5 - tiene q se el 1


    local registration:
    <template>
        <countTo :startVal='startVal' :endVal='endVal' :duration='3000'></countTo>
        </template>

        <script>
        import countTo from 'vue-count-to';
        export default {
        components: { countTo },
        data () {
            return {
            startVal: 0,
            endVal: 2017
            }
        }
        }
        </script>









-------------------------
creando seed

1
    php artisan make:seeder OrdenesTrabajoSeeder